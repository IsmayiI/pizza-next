generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider  = "postgresql"
   url       = env("POSTGRES_URL")
   directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
   id Int @id @default(autoincrement())

   fullName   String
   email      String   @unique
   password   String
   role       UserRole @default(USER)
   provider   String?
   providerId String?

   cart             Cart?
   orders           Order[]
   verificationCode VerificationCode?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   cartId    Int
}

model Category {
   id Int @id @default(autoincrement())

   name     String
   products Product[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Product {
   id Int @id @default(autoincrement())

   name        String
   imageUrl    String
   ingredients Ingredient[]
   items       ProductItem[]

   categoryId Int
   category   Category @relation(fields: [categoryId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model ProductItem {
   id Int @id @default(autoincrement())

   price     Int
   size      Int?
   pizzaType Int?
   cartItems CartItem[]

   productId Int
   product   Product @relation(fields: [productId], references: [id])
}

model Ingredient {
   id Int @id @default(autoincrement())

   name      String
   imageUrl  String
   price     Int
   products  Product[]
   cartItems CartItem[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Cart {
   id Int @id @default(autoincrement())

   token       String
   totalAmount Int        @default(0)
   items       CartItem[]

   userId Int?  @unique
   user   User? @relation(fields: [userId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model CartItem {
   id Int @id @default(autoincrement())

   quantity    Int
   ingredients Ingredient[]

   cartId Int
   cart   Cart @relation(fields: [cartId], references: [id])

   productItemId Int
   productItem   ProductItem @relation(fields: [productItemId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Order {
   id Int @id @default(autoincrement())

   token       String
   totalAmount Int
   status      OrderStatus
   paymentId   String?
   items       Json

   fullName String
   email    String
   address  String
   phone    String
   comment  String?

   userId Int?
   user   User? @relation(fields: [userId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model VerificationCode {
   id Int @id @default(autoincrement())

   code String @unique

   userId Int  @unique
   user   User @relation(fields: [userId], references: [id])

   createdAt DateTime @default(now())

   @@unique([code, userId])
}

enum OrderStatus {
   PENDING
   SUCCEDED
   CANCELLED
}

enum UserRole {
   USER
   ADMIN
}
